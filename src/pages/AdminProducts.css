import React, { useEffect, useState } from 'react';
import { getFirestore, collection, getDocs, doc, updateDoc } from 'firebase/firestore';
import { db } from '../firebase'; // Importa la tua istanza Firestore

// Componente per ogni singolo evento modificabile
function EditableItem({ item, onSave }) {
  const [isOpen, setIsOpen] = useState(false);
  const [formData, setFormData] = useState({ ...item });
  const [saving, setSaving] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: e.target.type === 'number' ? Number(value) : value
    }));
  };

  // Gestione checkbox booleani
  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: checked,
    }));
  };

  const handleSave = async () => {
    setSaving(true);
    await onSave(formData);
    setSaving(false);
    setIsOpen(false);
  };

  return (
    <div className="editable-item" style={{ border: '1px solid #ddd', borderRadius: 6, marginBottom: 12, padding: 12, background: '#fff' }}>
      <div
        style={{ cursor: 'pointer', fontWeight: 'bold', fontSize: '1.1rem', marginBottom: 8 }}
        onClick={() => setIsOpen(!isOpen)}
        aria-expanded={isOpen}
        role="button"
        tabIndex={0}
        onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') setIsOpen(!isOpen); }}
      >
        {item.title || `Evento ID: ${item.id}`} {isOpen ? '▲' : '▼'}
      </div>

      {isOpen && (
        <form onSubmit={e => { e.preventDefault(); handleSave(); }}>
          {Object.entries(formData).map(([key, value]) => {
            if (key === 'id') return null; // Non modificare l'id

            if (typeof value === 'boolean') {
              return (
                <div key={key} style={{ marginBottom: 8 }}>
                  <label>
                    <input
                      type="checkbox"
                      name={key}
                      checked={value}
                      onChange={handleCheckboxChange}
                      style={{ marginRight: 6 }}
                    />
                    {key}
                  </label>
                </div>
              );
            }

            return (
              <div key={key} style={{ marginBottom: 8 }}>
                <label htmlFor={`${item.id}-${key}`} style={{ display: 'block', marginBottom: 4, fontWeight: '600' }}>
                  {key}
                </label>
                <input
                  id={`${item.id}-${key}`}
                  name={key}
                  type={typeof value === 'number' ? 'number' : 'text'}
                  value={value}
                  onChange={handleChange}
                  style={{
                    width: '100%',
                    padding: '6px 8px',
                    borderRadius: 4,
                    border: '1px solid #ccc',
                    fontSize: '1rem',
                  }}
                />
              </div>
            );
          })}

          <button
            type="submit"
            disabled={saving}
            style={{
              padding: '8px 16px',
              backgroundColor: '#007bff',
              color: '#fff',
              border: 'none',
              borderRadius: 4,
              cursor: 'pointer',
              fontWeight: 'bold',
              marginTop: 8,
            }}
          >
            {saving ? 'Salvando...' : 'Salva'}
          </button>
        </form>
      )}
    </div>
  );
}

export default function EventsManager() {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchEvents() {
      try {
        const eventsCol = collection(db, 'events');
        const snapshot = await getDocs(eventsCol);
        const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setEvents(data);
      } catch (error) {
        console.error('Errore caricamento eventi:', error);
      }
      setLoading(false);
    }
    fetchEvents();
  }, []);

  const handleSave = async (updatedItem) => {
    try {
      const docRef = doc(db, 'events', updatedItem.id);
      // Copia l'oggetto senza l'id per updateDoc
      const { id, ...updateData } = updatedItem;
      await updateDoc(docRef, updateData);
      // Aggiorna lo stato locale
      setEvents(prev => prev.map(ev => ev.id === updatedItem.id ? updatedItem : ev));
    } catch (error) {
      console.error('Errore salvataggio evento:', error);
    }
  };

  if (loading) return <p>Caricamento eventi...</p>;

  if (events.length === 0) return <p>Nessun evento trovato.</p>;

  return (
    <div style={{ maxWidth: 900, margin: '0 auto', padding: 20 }}>
      <h2 style={{ marginBottom: 20 }}>Gestione Eventi</h2>
      {events.map(event => (
        <EditableItem key={event.id} item={event} onSave={handleSave} />
      ))}
    </div>
  );
}
