import React, { useEffect, useState } from 'react';
import Header from '../components/Header/Header';
import { auth } from '../firebase';
import { onAuthStateChanged } from 'firebase/auth';
import { isUserAdmin } from '../utility/firebaseHelpers';
import ProductsManager from '../utility/ProductsManager';
import EventsManager from '../utility/EventsManager';
import './AdminProducts.css';

function EditableItem({ item, onSave }) {
  const [isOpen, setIsOpen] = useState(false);
  const [formData, setFormData] = useState(item);

  useEffect(() => {
    setFormData(item); // aggiorna se cambia item esterno
  }, [item]);

  function handleChange(e) {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  }

  function handleSave() {
    onSave(formData);
    setIsOpen(false);
  }

  return (
    <div className="editable-item">
      <button
        className="editable-item-header"
        onClick={() => setIsOpen(open => !open)}
        aria-expanded={isOpen}
      >
        {item.name || item.title || 'Elemento'}
        <span className="toggle-icon">{isOpen ? '▲' : '▼'}</span>
      </button>

      {isOpen && (
        <div className="editable-item-body">
          {Object.entries(formData).map(([key, value]) => (
            key !== 'id' && (
              <div key={key} className="form-group">
                <label htmlFor={`${item.id}-${key}`}>{key}</label>
                <input
                  id={`${item.id}-${key}`}
                  name={key}
                  value={value}
                  onChange={handleChange}
                  type={typeof value === 'number' ? 'number' : 'text'}
                />
              </div>
            )
          ))}
          <button className="save-button" onClick={handleSave}>Save</button>
        </div>
      )}
    </div>
  );
}

export default function AdminProducts() {
  const [user, setUser] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [loadingUser, setLoadingUser] = useState(true);

  // Dummy data per esempio, sostituisci con dati reali o manager
  const [products, setProducts] = useState([]);
  const [events, setEvents] = useState([]);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (u) => {
      if (u) {
        setUser(u);
        const adminCheck = await isUserAdmin(u.uid);
        setIsAdmin(adminCheck);
        // qui potresti caricare prodotti e eventi
      } else {
        setUser(null);
        setIsAdmin(false);
      }
      setLoadingUser(false);
    });
    return unsubscribe;
  }, []);

  // Funzioni dummy save, da collegare a update DB
  function saveProduct(updated) {
    setProducts(prev => prev.map(p => p.id === updated.id ? updated : p));
    // aggiorna DB...
  }

  function saveEvent(updated) {
    setEvents(prev => prev.map(e => e.id === updated.id ? updated : e));
    // aggiorna DB...
  }

  if (loadingUser) return <div>Caricamento utente...</div>;
  if (!user) return <div>Devi essere loggato per accedere a questa pagina.</div>;
  if (!isAdmin) return <div>Accesso negato. Non sei un amministratore.</div>;

  return (
    <div style={{ padding: 20 }}>
      <Header />
      <h2>Manage Products</h2>
      {products.length === 0 ? <p>Nessun prodotto</p> : products.map(p => (
        <EditableItem key={p.id} item={p} onSave={saveProduct} />
      ))}

      <hr style={{ margin: '2rem 0' }} />

      <h2>Manage Events</h2>
      {events.length === 0 ? <p>Nessun evento</p> : events.map(e => (
        <EditableItem key={e.id} item={e} onSave={saveEvent} />
      ))}
    </div>
  );
}
